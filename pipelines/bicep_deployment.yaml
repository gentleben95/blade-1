trigger:
- none


pool:
  name: CustomPool1

variables:
- group: DevOps-Prod
- group: DevOps-Dev
- group: 'credentials'
- name: tag
  value: '$(Build.BuildId)'
  
stages:
- stage: DeployDev
  displayName: 'Deploy to Dev environment'
  jobs:
  - deployment: DeployDevInfrastructure
    environment:
      name: Development
    strategy:
      runOnce:
        deploy:
          steps:
          # Step 0: Checkout means "download" the repository from ADO
          - checkout: self

          # Step 1: Check if required Azure CLI modules and other tools are installed
          - task: PowerShell@2
            displayName: 'Check Required Tools'
            inputs:
              targetType: 'inline'
              script: |
                # Check if Azure CLI is installed
                if (-not (Get-Command 'az' -ErrorAction SilentlyContinue)) {
                  Write-Host "Azure CLI is not installed. Installing Azure CLI..."
                  Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
                  Start-Process msiexec.exe -ArgumentList '/i AzureCLI.msi /quiet' -Wait
                }
                Write-Host "All required tools are installed."

          - task: PowerShell@2
            displayName: 'Print Environment Variables'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Printing all environment variables:"
                Get-ChildItem Env: | ForEach-Object { Write-Host "$($_.Name)=$($_.Value)" }

          # Step 2: Check if the Resource Group exists, if not, create it
          - task: AzureCLI@2
            displayName: 'Check Resource Group'
            inputs:
              azureSubscription: $(dev_azureServiceConnection)
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Check if the resource group exists
                $resourceGroupExists = az group exists -n $(dev_resourceGroup)
                if ($resourceGroupExists -eq 'false') {
                  Write-Host "Resource group $(dev_resourceGroup) does not exist. Creating it..."
                  az group create --name $(dev_resourceGroup) --location $(dev_location)
                } else {
                  Write-Host "Resource group $(dev_resourceGroup) already exists."
                }

          # Step 3: Deploy the infrastructure using Bicep
          - task: AzureCLI@2
            displayName: 'Deploy Resources using Bicep'
            inputs:
              azureSubscription: $(dev_azureServiceConnection)
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $deploymentName = "infraDeployment-" + "$(tag)"
                az deployment group create `
                  --resource-group $(dev_resourceGroup) `
                  --name $deploymentName `
                  --template-file $(System.DefaultWorkingDirectory)/bicep/main.bicep `
                  --parameters location=$(dev_location) appName=$(dev_appName) spnObjectId=$(dev_spnObjectId)

- stage: DeployProd
  displayName: 'Deploy to Prod environment'
  condition: and(succeeded('DeployDev'), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: DeployProdInfrastructure
    environment:
      name: Production
    strategy:
      runOnce:
        deploy:
          steps:
          # We are not doing checkout, to be sure we use the same code as in Dev stage
          
          # Step 1: Check if the Resource Group exists, if not, create it
          - task: AzureCLI@2
            displayName: 'Check Resource Group'
            inputs:
              azureSubscription: $(prod_azureServiceConnection)
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Check if the resource group exists
                $resourceGroupExists = az group exists -n $(prod_resourceGroup)
                if ($resourceGroupExists -eq 'false') {
                  Write-Host "Resource group $(prod_resourceGroup) does not exist. Creating it..."
                  az group create --name $(prod_resourceGroup) --location $(prod_location)
                } else {
                  Write-Host "Resource group $(prod_resourceGroup) already exists."
                }

          # Step 2: Deploy the infrastructure using Bicep
          - task: AzureCLI@2
            displayName: 'Deploy Resources using Bicep'
            inputs:
              azureSubscription: $(prod_azureServiceConnection)
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $deploymentName = "infraDeployment-" + "$(tag)"
                az deployment group create `
                  --resource-group $(prod_resourceGroup) `
                  --name $deploymentName `
                  --template-file $(System.DefaultWorkingDirectory)/bicep/main.bicep `
                  --parameters location=$(prod_location) appName=$(prod_appName) spnObjectId=$(prod_spnObjectId)
